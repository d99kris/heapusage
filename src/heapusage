#!/bin/bash

# Copyright (C) 2017-2018 Kristofer Berggren
# All rights reserved.
#
# heapusage is distributed under the BSD 3-Clause license, see LICENSE for details.

showusage()
{
  echo "Heapusage is a light-weight tool for finding memory leaks in"
  echo "applications."
  echo ""
  echo "Usage: heapusage [-d] [-f] [-m minsize] [-n] [-o path] PROG [ARGS..]"
  echo "   or: heapusage --help"
  echo "   or: heapusage --version"
  echo ""
  echo "Options:"
  echo "   -d              debug mode, running program through debugger"
  echo "   -f              check for invalid free's (experimental)"
  echo "   -m <minsize>    minimum leak in bytes for detailed reporting"
  echo "   -n              no symbol lookup (faster)"
  echo "   -o <path>       write output to specified file path, instead of stderr"
  echo "   PROG            program to run and analyze"
  echo "   [ARGS]          optional arguments to the program"
  echo "   --help          display this help and exit"
  echo "   --version       output version information and exit"
  echo ""
  echo "Examples:"
  echo "heapusage ls"
  echo ""
  echo "executes the program 'ls' and measures its heap usage."
  echo ""
  echo "Report bugs at https://github.com/d99kris/heapusage"
  echo ""
}

showversion()
{
  echo "heapusage v1.12"
  echo ""
  echo "Copyright (C) 2017-2020 Kristofer Berggren"
  echo ""
  echo "heapusage is distributed under the BSD 3-Clause license."
  echo ""
  echo "Written by Kristofer Berggren"
}

# Arguments - special cases
if [ "${1}" == "--help" ] ; then
  showusage
  exit 0
elif [ "${1}" == "--version" ] ; then
  showversion
  exit 0
elif [ "${#}" == "0" ] ; then
  showusage
  exit 1
fi

# Arguments - regular options
DEBUG="0"
FREE="0"
MINLEAK="0"
NOSYMS="0"
OUTFILE=""
while getopts "?dfm:no:" OPT; do
  case "${OPT}" in
  \?)
    showusage
    exit 1
    ;;
  d)
    DEBUG="1"
    ;;
  f)
    FREE="1"
    ;;
  m)
    MINLEAK="${OPTARG}"
    ;;
  n)
    NOSYMS="1"
    ;;
  o)
    OUTFILE="${OPTARG}"
    ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Arguments - ensure program specified
if [ "${#}" == "0" ] ; then
  showusage
  exit 1
fi

# Determine self location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Set Heapusage library name
if [ "$(uname)" == "Darwin" ]; then
  # Mac
  LIBNAME="libheapusage.dylib"
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  # GNU/Linux
  LIBNAME="libheapusage.so"
else
  # Unsupported OS
  echo "Unsupported OS"
  exit 1
fi

# Supported library paths
LIBPATHS=(
  "${DIR}/../lib/${LIBNAME}"
  "${DIR}/.libs/${LIBNAME}"
  "${DIR}/${LIBNAME}"
)

# Create temp dir
TMP=$(mktemp -d)

# Set output path
if [ "${OUTFILE}" == "" ]; then
  # Create temporary output dir and set up log file path
  TMPLOG="${TMP}/heapusage.log"
else
  # Clear temp log path, just to be safe
  TMPLOG=""
fi

# Iterate through library paths
RV=1
CNT=0
FOUND=0
while [ "${LIBPATHS[CNT]}" != "" ]; do
  LIBPATH="${LIBPATHS[CNT]}"
  if [ -e "${LIBPATH}" ]; then

    # Run program
    if [ "${DEBUG}" == "0" ]; then
      HU_FREE="${FREE}"                     \
      HU_FILE="${TMPLOG}${OUTFILE}"         \
      HU_MINLEAK="${MINLEAK}"               \
      HU_NOSYMS="${NOSYMS}"                 \
      LD_PRELOAD="${LIBPATH}"               \
      DYLD_INSERT_LIBRARIES="${LIBPATH}"    \
      DYLD_FORCE_FLAT_NAMESPACE=1           \
      "${@:1}"
    else
      LLDBCMDPATH="${TMP}/lldb.cmd"
      echo "env HU_FREE=\"${FREE}\""                    >  "${LLDBCMDPATH}"
      echo "env HU_FILE=\"${TMPLOG}${OUTFILE}\""        >> "${LLDBCMDPATH}"
      echo "env HU_MINLEAK=\"${MINLEAK}\""              >> "${LLDBCMDPATH}"
      echo "env HU_NOSYMS=\"${NOSYMS}\""                >> "${LLDBCMDPATH}"
      echo "env LD_PRELOAD=\"${LIBPATH}\""              >> "${LLDBCMDPATH}"
      echo "env DYLD_INSERT_LIBRARIES=\"${LIBPATH}\""   >> "${LLDBCMDPATH}"
      echo "env DYLD_FORCE_FLAT_NAMESPACE=1"            >> "${LLDBCMDPATH}"
      echo "run ${@:2}"                                 >> "${LLDBCMDPATH}"
      lldb "${1}" -s "${LLDBCMDPATH}"
    fi
    
    FOUND=1
    RV=${?}
    break
  fi
  CNT=$((${CNT} + 1))
done

# Report error if library not found
if [ "${FOUND}" != "1" ]; then
  echo "error: unable to determine path of ${LIBNAME}"
  exit 1
fi

# Process temporary output dir
if [ "${OUTFILE}" == "" ]; then
  if [ -f "${TMPLOG}" ]; then
    cat "${TMPLOG}" >&2
  else
    echo "error: unable to preload libheapusage"
  fi

fi

# Cleanup temp dir
rm -rf "${TMP}"

# Exit
exit ${RV}
