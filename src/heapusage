#!/usr/bin/env bash

# Copyright (C) 2017-2024 Kristofer Berggren
# All rights reserved.
#
# heapusage is distributed under the BSD 3-Clause license, see LICENSE for details.

showusage()
{
  echo "Heapusage is a light-weight tool for finding heap memory errors in"
  echo "applications."
  echo ""
  echo "Usage: heapusage [-d] [-m minsize] [-n] [-o path] [-s SIG] [-t tools] PROG [ARGS..]"
  echo "   or: heapusage --help"
  echo "   or: heapusage --version"
  echo ""
  echo "Options:"
  echo "   -d              debug mode, running program through debugger"
  echo "   -m <minsize>    min alloc size to enable analysis for (default 0)"
  echo "   -n              no symbol lookup (faster)"
  echo "   -o <path>       write output to specified file path, instead of stderr"
  echo "   -s <SIG>        enable on-demand logging when signalled SIG signal"
  echo "   -t <tools>      analysis tools to use (default \"leak\")"
  echo "   PROG            program to run and analyze"
  echo "   [ARGS]          optional arguments to the program"
  echo "   -h,--help       display this help and exit"
  echo "   -v,--version    output version information and exit"
  echo ""
  echo "Supported tools (for option -t):"
  echo "   all             enables all supported tools below"
  echo "   double-free     detect free'ing of buffers already free'd"
  echo "   leak            detect memory allocations never free'd"
  echo "   overflow        detect buffer overflows, i.e. access beyond"
  echo "                   allocated memory"
  echo "   use-after-free  detect access to free'd memory buffers"
  echo ""
  echo "Examples:"
  echo "heapusage -t leak,overflow -m 2048 ./ex001"
  echo "   analyze heap allocations of minimum 2048 bytes for leaks and overflows."
  echo ""
  echo "heapusage -t all -m 0 ./ex002"
  echo "   analyze heap allocations of any size with all tools."
  echo ""
  echo "Report bugs at https://github.com/d99kris/heapusage"
  echo ""
}

showversion()
{
  echo "heapusage v2.12"
  echo ""
  echo "Copyright (C) 2017-2024 Kristofer Berggren"
  echo ""
  echo "heapusage is distributed under the BSD 3-Clause license."
  echo ""
  echo "Written by Kristofer Berggren"
}

# Arguments - special cases
if [[ "${1}" == "--help" ]] || [[ "${1}" == "-h" ]]; then
  showusage
  exit 0
elif [[ "${1}" == "--version" ]] || [[ "${1}" == "-v" ]] ; then
  showversion
  exit 0
elif [[ "${#}" == "0" ]] ; then
  showusage
  exit 1
fi

# Arguments - regular options
DEBUG="0"
MINSIZE="0"
NOSYMS="0"
OUTFILE=""
SIGNO=""
TOOLS="leak"
while getopts "?dfm:no:s:t:" OPT; do
  case "${OPT}" in
  \?)
    showusage
    exit 1
    ;;
  d)
    DEBUG="1"
    ;;
  m)
    MINSIZE="${OPTARG}"
    ;;
  n)
    NOSYMS="1"
    ;;
  o)
    OUTFILE="${OPTARG}"
    ;;
  s)
    if ! [[ "${OPTARG}" =~ ^[0-9]+$ ]]; then
      # Not a number, try signal name
      SIGNO="$(kill -l ${OPTARG} 2> /dev/null)"
      if [[ "${SIGNO}" == "" ]]; then
        echo "error: unknown signal name ${OPTARG}"
        exit 1
      fi
    else
      SIGNO="${OPTARG}"
    fi
    ;;
  t)
    TOOLS="${OPTARG}"
    ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Arguments - ensure program specified
if [ "${#}" == "0" ] ; then
  showusage
  exit 1
fi

# Determine self location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Set Heapusage library name
if [ "$(uname)" == "Darwin" ]; then
  # Mac
  LIBNAME="libheapusage.dylib"
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  # GNU/Linux
  LIBNAME="libheapusage.so"
else
  # Unsupported OS
  echo "error: unsupported OS"
  exit 1
fi

# Supported library paths
LIBPATHS=(
  "${DIR}/../lib/${LIBNAME}"
  "${DIR}/.libs/${LIBNAME}"
  "${DIR}/${LIBNAME}"
)

# Setup tools options
DOUBLEFREE="0"
LEAK="0"
OVERFLOW="0"
USEAFTERFREE="0"
for TOOL in ${TOOLS//,/ }
do
  case "${TOOL}" in
  all)
    DOUBLEFREE="1"
    LEAK="1"
    OVERFLOW="1"
    USEAFTERFREE="1"
    ;;      
  double-free)
    DOUBLEFREE="1"
    ;;
  leak)
    LEAK="1"
    ;;
  overflow)
    OVERFLOW="1"
    ;;
  use-after-free)
    USEAFTERFREE="1"
    ;;
  *)
    echo "warning: ignoring unsupported tool \"${TOOL}\""
    ;;
  esac
done

# Bail out if no tool was selected
if [[ "${DOUBLEFREE}${LEAK}${OVERFLOW}${USEAFTERFREE}" == "0000" ]]; then
  echo "error: no tool enabled, aborting."
  exit 1
fi

# Create temp dir
TMP=$(mktemp -d)

# Set output path
if [ "${OUTFILE}" == "" ]; then
  # Create temporary output dir and set up log file path
  TMPLOG="${TMP}/heapusage.log"
else
  # Clear temp log path, just to be safe
  TMPLOG=""
fi

# Iterate through library paths
RV=1
CNT=0
FOUND=0
while [ "${LIBPATHS[CNT]}" != "" ]; do
  LIBPATH="${LIBPATHS[CNT]}"
  if [ -e "${LIBPATH}" ]; then

    # Run program
    if [ "${DEBUG}" == "0" ]; then
      HU_DOUBLEFREE="${DOUBLEFREE}"         \
      HU_LEAK="${LEAK}"                     \
      HU_OVERFLOW="${OVERFLOW}"             \
      HU_USEAFTERFREE="${USEAFTERFREE}"     \
      HU_FILE="${TMPLOG}${OUTFILE}"         \
      HU_MINSIZE="${MINSIZE}"               \
      HU_NOSYMS="${NOSYMS}"                 \
      HU_SIGNO="${SIGNO}"                   \
      LD_PRELOAD="${LIBPATH}"               \
      DYLD_INSERT_LIBRARIES="${LIBPATH}"    \
      DYLD_FORCE_FLAT_NAMESPACE=1           \
      "${@:1}"
    else
      LLDBCMDPATH="${TMP}/lldb.cmd"
      echo "env HU_DOUBLEFREE=\"${DOUBLEFREE}\""        >  "${LLDBCMDPATH}"
      echo "env HU_LEAK=\"${LEAK}\""                    >> "${LLDBCMDPATH}"
      echo "env HU_OVERFLOW=\"${OVERFLOW}\""            >> "${LLDBCMDPATH}"
      echo "env HU_USEAFTERFREE=\"${USEAFTERFREE}\""    >> "${LLDBCMDPATH}"
      echo "env HU_FILE=\"${TMPLOG}${OUTFILE}\""        >> "${LLDBCMDPATH}"
      echo "env HU_MINSIZE=\"${MINSIZE}\""              >> "${LLDBCMDPATH}"
      echo "env HU_NOSYMS=\"${NOSYMS}\""                >> "${LLDBCMDPATH}"
      echo "env HU_SIGNO=\"${SIGNO}\""                  >> "${LLDBCMDPATH}"
      echo "env LD_PRELOAD=\"${LIBPATH}\""              >> "${LLDBCMDPATH}"
      echo "env DYLD_INSERT_LIBRARIES=\"${LIBPATH}\""   >> "${LLDBCMDPATH}"
      echo "env DYLD_FORCE_FLAT_NAMESPACE=1"            >> "${LLDBCMDPATH}"
      echo "run ${@:2}"                                 >> "${LLDBCMDPATH}"
      lldb "${1}" -s "${LLDBCMDPATH}"
    fi
    
    FOUND=1
    RV=${?}
    break
  fi
  CNT=$((${CNT} + 1))
done

# Report error if library not found
if [ "${FOUND}" != "1" ]; then
  echo "error: unable to determine path of ${LIBNAME}"
  exit 1
fi

# Process temporary output dir
if [ "${OUTFILE}" == "" ]; then
  if [ -f "${TMPLOG}" ]; then
    cat "${TMPLOG}" >&2
  else
    echo "error: unable to preload libheapusage"
  fi

fi

# Cleanup temp dir
rm -rf "${TMP}"

# Exit
exit ${RV}
